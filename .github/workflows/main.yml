# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: touch ./src/main/resources/application.properties
    - run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
    - run: cat ./src/main/resources/application.properties

    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean build
      shell: bash

    - name: Get current time
      uses: 1466587594/get-current-time@v2
      id: current-time
      with:
        format: YYYY-MM-DDTHH-mm-ss
        utcOffset: "+09:00"

      # 전송할 파일을 담을 디렉토리 생성 및 압축파일 형태로 전달
    - name: Generate deployment package
      run: |
        mkdir -p deploy
        cp build/libs/*.jar deploy/application.jar
        cp Procfile deploy/Procfile
        cp -r .ebextensions deploy/.ebextensions
        cd deploy && zip -r deploy.zip .
        

    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: springboot-mini
        environment_name: Springbootmini-env
        version_label: github-action-${{steps.current-time.outputs.formattedTime}}
        region: ap-northeast-2
        deployment_package: deploy/deploy.zip


      # 전송할 파일을 담을 디렉토리 생성
#    - name: Make Directory for deliver
#      run: mkdir deploy
#
#      # Jar 파일 Copy
#    - name: Copy Jar
#      run: cp ./build/libs/*.jar ./deploy/
#
#      # 압축파일 형태로 전달
#    - name: Make zip file
#      run: zip -r -qq -j ./springboot-intro-build.zip ./deploy

#      # S3 Bucket으로 copy
#    - name: Deliver to AWS S3
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      run: |
#        aws s3 cp \
#        --region ap-northeast-2 \
#        --acl private \
#        ./springboot-intro-build.zip s3://springboot-intro-build/


#    - name: Setup MySQL
#      uses: samin/mysql-action@v1
#      with:
#        character set server: 'utf8'
#        mysql database: ${{ secrets.SQL_DB_URL }}
#        mysql user: 'admin'
#        mysql password: ${{ secrets.SQL_DB_PASSWORD }}
